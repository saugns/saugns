sgensys is the Sound GENeration SYStem, a sound synthesis program
and scripting language. A very lightweight system for mathematical
sound synthesis, it doesn't support using pre-recorded samples.

While developed with the aim of becoming useful for writing
electronic music, the language is still very simple and the audio
retro-ish. It is however easy to use for experimenting with sounds.

A collection of basic wave types are supported, as well
as AM/RM, FM, and PM (the "FM" of most commercial synthesizers).
An arbitrary number of oscillators can be used.

The program reads Sound Generation Script files or strings.
Output can be to system audio, a 16-bit PCM WAV file,
and/or stdout (raw or AU, for interfacing with other programs).

Tested mainly on x86 and x86-64. Comes with support for
running on DragonFly, FreeBSD, Linux, NetBSD, and OpenBSD.
The following audio systems are expected:
	DragonFly	OSS
	FreeBSD  	OSS
	Linux    	ALSA or OSS
	NetBSD   	OSS
	OpenBSD  	sndio

Building and installing
=======================

Building requires a C99 compiler and `make` (GNU or BSD).
On Linux systems, the ALSA library must be installed to build.
In the cases of the 4 major BSDs, the base systems have it all.

A simple test after building is the following, which should
play a sine wave at 440 Hz for 1 second:
	./sgensys -e "Osin"

`make install` will by default copy 'sgensys' to '/usr/local/bin/',
and the contents of 'examples/' to '/usr/local/share/sgensys/'.
(`make uninstall` removes the sgensys binary and directory.)

Licensing
=========

sgensys is distributed under the terms of the GNU Lesser General
Public License (LGPL), version 3 or later. See the file COPYING
for details, or <https://www.gnu.org/licenses/>.

Some files are licensed under more permissive terms, such as
the ISC license (2-clause-BSD-equivalent), or
the 0BSD license (public-domain-equivalent shorter version);
see the heading comment text of source files.

The example and test scripts included as input for the program
currently do not have any explicit licensing. If needed in the
future, some Creative Commons license will be used. Feel free
to copy from the current ones for your own scripts.

Script syntax overview
======================

General description
-------------------

The core idea of the language is that of time-ordered steps for
configuring audio generation: add an oscillator, then later,
change a parameter and extend play duration, etc. A script is
basically a list of such timed instructions. Language constructs
also offer more flexible arrangement of steps to take than a
bare flat list of instructions and forward time movement.

The current syntax uses keywords followed by zero or more
parameters with arguments. Each main keyword provides an action,
either at run time (like a function call in other languages),
or at parse time (like a global script setting).

The most important keyword, "O" followed by a wavetype, adds a
wave oscillator. They may be connected as carriers and modulators.
They, and the timing of their running, make the core features of
the scripting language.

Keyword parameters may either be set (named, followed by writing
their argument(s)), or left out to use the previous value or a
default value. Some default values can be changed using the "S"
(set option) parse-time action.

Modifiers are similar to keywords, but simpler and more flexible
in how they may be used. They may or may not be followed by an
argument (e.g. a delay time).

Keywords
--------

Each of these keywords is further described in its own section below.
	S	Script options (parameter default value or other);
		runs during parsing. Changes made inside a
		nested list scope don't apply outside of it.
	O	Wave oscillator; the "O" is followed by the (initial)
		wave type, as in "Osin".
	P	Panning for the voice at the current location; to be
		followed by the new value.
	Q	Quit script; end parsing, commenting out all that follows.
		Optional. (Commenting more generally uses "#", "//",
		or "/*...*/" syntax.)

See the section 'Timing' for modifiers.

S: Script options
-----------------

Set parameter default value or other option; runs during parsing.
Changes made inside a nested list scope don't apply outside of it.
Usage: "S", followed by zero or more parameters, each with a value.

Parameters:
	a	Multiplier for amplitude "a" values, for the current
		level of list nesting only. (The multiplier also applies
		to "a,w" values.) If used at the top level, this disables
		automatic down-scaling of amplitude per voice by the
		number of voices, for manual control instead.
	f	Default frequency "f" value, in Hz. Starts at 440.
		,n	A4 tuning frequency in Hz for "f" values
			using note syntax. Starts at 440.
	r	Default relative frequency "r" value, a
		modulator:carrier ratio. Starts at 1 (1/1, a "1:1" ratio).
	t	Default short definite time "t" value, in seconds.
		Default times may be longer (and occasionally shorter)
		depending on the context. Starts at 1.0.

O: Wave oscillator
------------------

Wave oscillator. (The sine variety can be used as a typical
FM synthesizer operator.) If not used as a modulator,
the output will be added as a sound at the current
time position, playing for the time duration.

Usage: "O" followed by (initial) wave type (e.g. "Osin"),
followed by zero or more parameters, each with a value.

Wave types:
	sin	Sine.
			For cosine, use (1/4) phase.
	sqr	Square.
	tri	Triangle.
	saw	Saw.
			Increasing slope; use negative amplitude
			or frequency for decreasing slope.
	ahs	Absolute half-frequency sine (adjusted).
			Sine-based parabola-like wave.
			Frequency halved to restore base frequency,
			peak amplitude centered and doubled, phase
			shifted to begin and end at zero amplitude.
			A softer alternative to "saw" (saw wave).
	hrs	Half-rectified sine (adjusted).
			Positive half kept, negative half zero'd.
			Peak amplitude centered and doubled, phase
			shifted to begin and end at zero amplitude.
			A warm and full sound.
	srs	Square root of sine.
			Mirrored for the negative half.
			A softer alternative to "sqr" (square wave).
	ssr	Squared & square root of sine.
			A little more thin and sharp, it differs from
			"srs" a little like "srs" differs from "szh".

Parameters:
	t	Time duration in seconds. If no "t" setting is given, the
		time set depends on the context.
			For a single non-nested oscillator, 1.0 is used unless
		the default value is changed with "S t".
			When several oscillators are specified, the default
		time is based on the longest remaining (at the current time)
		duration of play in use for any step at the current level,
		in considering the surrounding sequence of steps and delays
		(up to the next '|' time separator, or to the end of the
		script if none).
			For modulator oscillators, default time is however
		an "implicit" time length (see 'i' below), meaning playing
		whenever a carrier it is linked to does. (Implicit time is
		only supported for nested oscillators.) When such a time
		length is retrieved as part of setting the default time for
		something else, a definite default time in seconds (e.g. 1
		second) is however used instead.
			For a compound step, the first sub-step is however
		simply given the "S t" default value if no time is set.
		The following sub-steps in turn each have the time of the
		previous as its default time. The exception is modulators,
		for which the last sub-step has implicit time by default.
			Special non-number literals can also specify time:
		d	Definite default time can be set using "td", always.
		i	Implicit time can be set using "ti", for modulators.
	f	Frequency in Hz. Can be negative to flip wave shape timewise.
			"Value sweep" values are supported; see section.
			"Modulation with value range" is supported for FM
		(frequency modulation); see section. Note that the modulator
		lists for "f" and "r" expressions are shared and identical.
	r	(For modulator oscillators only.) Relative frequency, a value
		which will be multiplied by the frequency of closest carrier
		in the chain for the modulator, to give the frequency to use.
		For an n:m modulator:carrier frequency ratio, a value of the
		form (n/m) may be used; e.g., for a 4:3 frequency ratio,
		"r(4/3)".
			When using "r" the same values are changed as when
		using "f", the difference simply being whether multiplication
		by carrier frequency is switched on or off. Specific values
		like the main value or the ",w" second value can be set again
		under "f" or "r" to toggle just that value.
			"Value sweep" values are supported; see section.
			"Modulation with value range" is supported for FM
		(frequency modulation); see section. Note that the modulator
		lists for "f" and "r" expressions are shared and identical.
			Note that for FM modulators, the carrier frequency
		used as a multiplier is simply the unmodulated value. For
		other modulators, if FM is done the result will be used.
	a	Amplitude, where 1.0 corresponds to a level of 0dB and
		0.0 is silence. (Note that the final output level is scaled
		down by the number of voices; alternatively, the S "a" option
		can be used to set a multiplier used when adding a top-level
		carrier. Panning will further reduce output level unless
		fully left or right.) Can be negative to flip sign of result.
			"Value sweep" values are supported; see section.
			"Modulation with value range" is supported for AM & RM
		(amplitude and ring modulation); see section.
	p	Set the phase of the wave, and/or PM (phase modulation)
		modulators to use.
			A value modulo 1.0 is used to set phase as a
		percentage of the wave cycle. For example, p(3/4) will move
		a sine or triangle wave to its "bottom". This is mostly
		useful for changing the initial phase.
			"Modulator list" values are supported for PM (phase
                modulation); see section.
			The sum of modulator amplitudes is used to
		phase-modulate the carrier(s).
	w	Wave type. See "Wave types" for values.

P: Panning
----------

Set the panning (left-right "balance") of the voice associated with
the present oscillator(s), affecting the left and right output levels.
Value range is 0 (all-left) to 1 (all-right). Default is 0.5 (center).
Panning not at either extreme end will reduce level.
		"Value sweep" values are supported; see section.

Q: Quit
-------

Quit script; end parsing, commenting out all that follows.
Optional.

Commenting more generally uses "#" or "//" line comments,
or "/*...*/" C-style block comments.

Values and expressions
----------------------

Whitespace is not allowed within multi-character names, keywords or
numbers, and separates values. Spaces and tabs may otherwise be used or
omitted anywhere.

Following a "#" or "//", the rest of a line is commented out.
Following "/*", text is commented out until "*/" is encountered.

Numerical expressions:
	A number can be specified with or without a decimal point;
	for a number with a decimal point, a leading zero can be omitted.
	Number signs and arithmetic operation symbols can be used in infix
	expressions. But unless something is written within parentheses,
	it cannot contain any whitespace, as it ends the expression. For
	example, "-1" is fine, but "- 1" is a dangling minus followed by
	a dangling number 1, if not inside parentheses as "(- 1)".
		The following operations are recognized, and grouped below by
	priority (nested parentheses can be used to change evaluation order):
		^	To the power of (right-associative)
		* / %	Multiplication, division, remainder
		+ -	Addition, subtraction
	Parentheses also allow shorthand multiplication (leaving out a
	"*" between two parts), e.g. "2(3)" and "(2)3" both give "6".
		Some parameters support named constants specific to that type
	of value. Such a name can be written instead of a number.

Value sweep:
	To ramp, or sweep, a parameter which supports this towards a
	goal value -- the ordinary value being the start for a trajectory --
	following the ordinary value or by itself, the following value ramp
	subparameters can be given values within "[]" (square brackets):
	v	Goal value.
	t	Time to reach goal (default is the external "t" duration).
	c	Ramp curve type (default 'lin'):
			sah	Sample and hold until time (then jump to goal).
			lin	Linear trajectory over time.
			cos	Half cosine (S-curve) trajectory over time.
			exp	Steep "exp(x)-1"-like increase or decrease.
			log	Steep "log(x+1)"-like increase or decrease.
			xpe	Exponential envelope shape (saturate or decay).
			lge	Logarithmic envelope shape (saturate or decay).
		(The 'exp' and 'log' shapes use ear-tuned polynomial
		approximations with definite beginnings and ends,
		designed to sound natural for frequency sweeping,
		and symmetric one to the other. The 'xpe' shape increases
		like 'log' and decreases like 'exp', much like a capacitor
		charges and discharges, natural-sounding for an envelope;
		and 'lge' increases like 'exp' and decreases like 'log'.
		The 'cos' shape sounds similar to 'lin', except it has a
		smoothly curved start and stop, and a steeper middle.)

Modulator list:
	Within "[]", written after the name of a parameter that supports it,
	signal generators can be included for use with that parameter. For
	example, for PM the phase parameter 'p' is assigned a list as in
	"p[...]". It works the same for other parameters such as 'a'
	(for AM/RM) and 'f' (for FM), and subparameters such as 'a,w', etc.
		Assigning a list to a parameter will append the new list to
	any old one, expanding it rather than replacing the old items. Thus
	"p[]" changes nothing. To clear old items when setting a list, add
	'-' before the '[', as in "p-[]" (which removes all PM modulators).
		Lists can be assigned together with other values (numbers)
	for various parameters. For the whole expression beginning with the
	parameter name, whitespace can only be placed inside list brackets
	(or inside parentheses for any numerical expressions).
		"Value sweep" for a parameter can use the same list as one
	which contains modulators; the modulators simply need to be listed
	after any sweep subparameters (see section) which head the list.
		It's also possible to write multiple lists directly after
	one another when setting to a parameter (with or without the one
	leading '-'). These lists will be joined into one, meaning that
	"[X][Y]" for some contents "X" and "Y" is the same as "[X Y]".
	This also allows placing sweep subparameters in a later list.

Modulation with value range:
	Amplitude and frequency (and relative frequency) parameters support
	modulation of the parameter values within a bounded value range.
	(For amplitude, whether this modulation is called amplitude
	modulation (AM) or ring modulation (RM) is a matter of the value
	range. Ring modulation has the same magnitude for the upper and
	lower bound, but with differing sign, while classic amplitude
	modulation has one of the bounds set to zero.)
		Following the letter specifying the parameter, and optionally
	the main value, thereafter the second value used for the bounds of the
	range, and/or a list of modulator objects, can follow after ",w" (where
	the "w" is short for wave envelope). These parts of the larger argument
	are ordered and cannot contain any whitespace outside parentheses or
	brackets. The second value defaults to 0.0 if not set for the object.
	"Value sweep" is supported for the second value whenever for the main.
		After ",w" and optionally a value, lists can be used (see
	"Modulator list").
		Each modulator in the list will produce a result in the range
	of 0.0 to 1.0, i.e. a positive signal, multiplied by its amplitude
	parameter (defaulting to 1.0), negative amplitude multipliers having
	the effect of switching the top and bottom of the 0.0 to 1.0 range.
	Setting (changing) the amplitude for modulators will thus change
	the range when the absolute value is not 1.0, but this is allowed
	for the sake of flexibility.
		The product of modulator amplitudes is mapped to the value
	range; 0.0 means the main value and 1.0 means the second value.
	This adds a bias towards the main value with more modulators used.

Parameters and object binding:
	When specifying or referencing objects within "@[...]", any
	parameters set following the closing ']' will be bound to and apply
	to all of them.
		Significantly, this allows multiple carriers (given within
	the []) to be linked to the same modulator(s), whether for FM, PM,
	or AM/RM. (Note: Support for this is experimental and incomplete.)

Variables:
	A named variable can be assigned by writing an expression beginning
	with "'name", where the "name" is a case-sensitive string with
	alphanumeric characters and/or '_'. Variables are dynamically typed,
	can be assigned several times, and can either be assigned to a number
	or made to point to an object as a label for it.
		To assign a number, "'name=' can be written just before a
	numerical expression. Once it holds a number, it can be used in any
	numerical expression using "$name". (It's possible to use such a
	variable value as part of redefining its value.)
		To point a variable to an object, "'name " can be written
	just before an object is added or referenced. The name can then be
	used to refer back to the object as "@name", to start a new step for
	the object anywhere later in the script.
		A new "@name" step differs in not automatically setting a new
	time duration for the object, so "t" (see "Parameters") or other
	time-altering syntax (see "Timing") must be used in order for the
	old time duration value to be changed.
		Note that a "@name" reference placed in a nesting scope
	different from the original (e.g. outside a list, or in a new list)
	does not move the object into the new nesting scope. It will not be
	added to, nor removed from, any list by being referenced anywhere.
	The time scope is however new and of the reference.

Frequencies as notes:
	Frequency values may be specified as notes. Currently, justly
	intoned C-major scale is supported; "S f,n" sets the A4 tuning
	(default 440 Hz).
		The value consists of the note (C, D, E, F, G, A or B),
	optionally given a prefix and/or suffix. The prefix is an optional
	subnote (c, d, e, f, g, a or b) inside an inner octave (between
	note and next note). The suffix is an optional s (sharp) or
	f (flat), and/or, in the last position, an octave number
	(from 0-10, default 4).

Timing
------

A new step terminates the previous one, but they will have the same
placement in time unless a delay is added.

At the topmost script scope, newlines also terminate steps; within
sub-scopes, however, newlines may be placed freely.

Timing modifiers:
	|	Time separator. Delays all that follows by the duration of
		prior steps. This also resets any other delays to be added
		to later steps using other syntax like '/', so such should
		be placed after, not before, if it is to take effect.
	/	Forward shift, time in seconds. Delay the next step and
		all steps placed after. The next step can be either a
		split-out continuation of the current step, or new.
			Does not automatically extend time duration on
		splitting a step, unlike '\'.
	\	Subshift, time in seconds. For a current step only,
		split out a delayed follow-on step, without delaying
		any independent steps placed after. Depending on usage,
		may move, alternatively extend, the current sound in time.
			For ease of adding silent time padding, before the
		"\number" part (but not after it) the default time duration
		is changed to 0, so that any time value automatically set
		there will be 0. After the "\number" part, a time value is
		always set, the last "t" or default (before zeroing) value.
			Several uses of '\' to separate sub-steps in a row
		(e.g. no ';' in-between) never zero the default time after
		the first '\'.

Compound steps:
	The ';' sub-step separator can be written (on a new line or the same)
	after a step to specify new parameter arguments for an object, which
	apply just after the previous time duration, for a new duration which
	defaults to the length of the previous. (For the default time of the
	first sub-step, and about special handling for the last, see "t" under
	each "Parameters" for more). The use of ';' can be repeated.
		The time handling is designed to simplify writing a sequence
	of connected, non-overlapping timed updates for a single object. For
	example (three frequencies, one a second): "Osin f100 t1; f200; f300".
	Changing "t1" in this example changes time length for all three parts.
		For more flexibility, such as "silent" gaps between parts or
	overlapping parts, ';' can be combined with the '\' subshift, as in
	"; \number", which subdivides the part after the ';' into one before
	the '\' and one after, "number" seconds apart in time. The first has
	a default time duration of zero, for the second it is normal. For
	example, to insert "silent" gaps between the use of three values:
	"Osin f100 t1; \1 f200; \1 f300".
