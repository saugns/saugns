mgensys is the Music GENeration SYStem; it reads script files or strings,
and can output to system audio and/or a 16-bit PCM WAV file.

(This is an experimental redesign of the saugns program. The saugns program
is the more mature and stable version. This program reworks the design from
a much earlier starting point; if it becomes better, it will become the new
saugns program.)

The program as a whole is licensed under LGPL-3.0+, see COPYING for details.
Various smaller files are permissively licensed, see their heading comments.

Script syntax
-------------

Values can be of several main types, each with its own syntax:
 * Numbers.
 * Objects.
 * Arrays.

Non-negative numbers can be written directly. Within parentheses, conventional
infix expressions can be used, allowing the signs + and -, and arithmetic with
+, -, *, /, and ^ (to the power of). Parentheses can be nested, and multiplied
in the conventional way, e.g. (1 + 2(5)) makes 11. Numbers can be written with
or without a decimal point, and leading zeroes can freely be added or removed.

Object types, e.g. "W" (Wave oscillator), have one-letter uppercase names. To
create an instance, the letter is written, followed by any required argument.
Additional parameters have one-letter lowercase names, optionally written for
assigning non-default value(s).

The letter "S" behaves like an object type, but is used to set global options.

Arrays of objects are created using curly brackets ("{" and "}"), and used to
set modulators. They are not currently allowed in other contexts.

A newline ends the scope for assigning values to an object, unless within
parentheses or brackets part of a value. "<" and ">" allow nesting the scope
for value assignments; the object prior to the < remains in scope until new
objects are given, and a newline or a > will return to the object for which
the < was given.

Each object instance and value assignment has a time position, beginning at
0 seconds. Time delay modifiers advance the time position.

The following objects are supported:

S:
	Set default value or other global option in the script.
	a	Amplitude multiplier for all carrier waves. Starts at 1.0.
		Effectively a global volume control.
	c	Default channel mixing value. Starts at 0.0, i.e. C (center).
		Useful as a main way of setting the parameter value;
		see "Channel mixing values" for more.
	f	Default carrier frequency in Hz. Starts at 100.0.
	r	Default carrier-modulator frequency ratio (for modulators),
		as multiple of the carrier frequency. Starts at 1.0.
	t	Default time duration in seconds. Starts at 1.0.

Sound generator parameters:
	Named parameters common to N (noise generator) and W (wave oscillator).
	t	Time duration in seconds. If no t setting given, default time
		depends on context - either scaling to fit the duration of
		play until the end of the current group of sounds, or the
		default value if alone.
	a	Amplitude, where 1.0 gives a level of 0dB, which is the signal
		max of the output. For a modulator wave, this however simply
		adjusts the effect strength.
	a!{}	Second amplitude to modulate (AM) to by wave or envelope,
		and/or a list of modulators given within {} following the
		number if given.
	c	Channel mixing; see "Channel mixing values".
	\	Time shift/delay current operation and following ones, time
		in seconds.

Nwh:
	Noise generator; "wh" (white noise) is currently the only type.
	See "Sound generator parameters" for the other named parameters.
	n	Change noise; "wh" (white noise) is currently the only type.

Wsin, Wsqr, W...:
	Wave oscillator; see "Wave types" for all types.
	See "Sound generator parameters" for the other named parameters.
	f	Frequency in Hz, for carrier or modulator.
	f!{}	Second frequency in Hz to modulate (FM) to by wave or envelope,
		and/or a list of modulators given within {} following the
		number if given.
	r	Frequency as a carrier-modulator ratio, for modulators only.
		Maintains a frequency which multiplies that of the carrier by
		the value. For example, r(5/3) for 5/3 (i.e. 3:5) the carrier
		frequency.
	r!{}	Second frequency ratio (modulators only) to modulate (FM)
		to by wave or envelope, and/or a list of modulators given
		within {} following the number if given.
	p	Set the beginning phase of the wave. For example, p(3/4) will
		make a sine or triangle wave begin at its "bottom". This is
		mostly used where wanted for waves used by f!/r! or a!.
	p!{}	A list of modulator (PM) waves is given within the {}, the
		per-sample sum of which is used to phase-modulate the carrier,
		be it the final carrier or in turn another modulator.
	w	Change wave; see "Wave types" for all types.

Wave types:
	sin	Sine.
			For cosine, use (1/4) phase.
	sqr	Square (anti-aliased cycle).
			Lacks full "bite" at low frequencies.
	tri	Triangle (naive).
	saw	Saw (anti-aliased cycle).
			Lacks full "bite" at low frequencies.
			Decreasing slope; use negative amplitude
			or frequency for increasing slope.
	sha	Half-frequency absolute sine (adjusted).
			Frequency halved to restore base frequency,
			peak amplitude centered and doubled, phase
			shifted to begin and end at zero amplitude.
			A softer alternative to "saw" (saw wave).
	szh	Half-zero'd sine (adjusted).
			Positive half kept, negative half zero'd,
			peak amplitude centered and doubled, phase
			shifted to begin and end at zero amplitude.
			A warm and full sound.
	ssr	Square root of sine.
			Mirrored for the negative half.
			A softer alternative to "sqr" (square wave).

Channel mixing values:
	Panning, where 0.0 is centered. Named constants can be used in place
	of numbers for the three classic channel "modes". Values outside the
	range of L to R are allowed, amplifying one channel while giving the
	other a negative amplitude.
	C	0.0
	L	(-1.0)
	R	1.0

The following modifiers are supported:

/:	Time shift/delay next operation and following ones, time in seconds.
	Alternatively, /t will delay by the time of the previous operation.
|:	Add (independently of /) enough time shift/delay for the next operation
	to begin at the end of all that preceeds it, though / and \ may
	further delay it.

Any sound generator instance may be prefixed by "'label " in order to define
a label for it, where the label is alphanumeric (and/or '_'); thereafter the
label may be referenced as ":label", allowing future changes to the instance
values.
