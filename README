sgensys is the Sound GENeration SYStem, a sound synthesis program
and scripting language. A very lightweight system for mathematical
sound synthesis, it doesn't support using pre-recorded samples.

While developed with the aim of becoming useful for writing
electronic music, the language is still very simple and the audio
retro-ish. It is however easy to use for experimenting with sounds.

8 basic wave types are supported, as well as AM, FM, and PM (the
"FM" of most commercial synthesizers). An arbitrary number of
oscillators can be used.

The program reads SGS script files and produces audio.
Output can be to system audio, and/or a 16-bit PCM WAV file.

Supported platforms include x86 and x86-64,
running DragonFly, FreeBSD, Linux, NetBSD, or OpenBSD.
Other systems are untested. The following audio systems are expected:
	DragonFly	OSS
	FreeBSD  	OSS
	Linux    	ALSA or OSS
	NetBSD   	OSS
	OpenBSD  	sndio

Building and installing
=======================

Building can be done using make (GNU or BSD) and a modern C compiler.
On supported systems, there is no extra configuration.

There are no extra dependencies except system audio libraries as
needed for the platform. (On Linux systems, the ALSA sound library
headers often need to be installed. The BSDs supported provide
everything needed.)

There is currently no install script or target provided. After
building, the 'sgensys' binary and the 'examples/' directory
can be copied.

Licensing
=========

sgensys is distributed under the terms of the GNU Lesser General
Public License (LGPL), version 3 or later. See the file COPYING
for details, or <https://www.gnu.org/licenses/>.

The example and test scripts included as input for the program
currently do not have any explicit licensing. If needed in the
future, some Creative Commons license will be used. Feel free
to copy from the current ones for your own scripts.

Script syntax overview
======================

General description
-------------------

The current syntax uses keywords followed by zero or more
parameters with arguments. Each main keyword provides an action,
either at run time (like a function call in other languages),
or at parse time (like a global script setting).

The most important keyword, "O" followed by a wavetype, adds an
operator. Operators are oscillators with parameters, and may be
connected as carriers and modulators. They, and the timing of their
running, make the core features of the scripting language.

Events and timing are central; each addition of an operator, or
later change to operator or voice parameters, is an event. Timing
modifiers may be used quite freely in the script to change the
relative time placement of events.

Keyword parameters may either be set (named, followed by writing
their argument(s)), or left out to use the previous value or a
default value. Some default values can be changed using the "S"
(set option) parse-time action.

Modifiers are similar to keywords, but simpler and more flexible
in how they may be used. They may or may not be followed by an
argument (e.g. a delay time).

Keywords
--------

Each of these keywords is further described in its own section below.
	S	Set option (parameter default value or other);
		runs during parsing.
	O	Add operator; an oscillator with parameters, either a
		carrier which produces sound for a duration, or a
		modulator; the "O" must be immediately followed by the
		(initial) wave type, as in "Osin".
	P	Panning for the voice at the current location; to be
		followed by the new value.
	Q	Quit script; end parsing, turning all that follows
		into a comment. (Optional.) Other ways to comment exist.

See the section 'Timing' for modifiers.

Set option: S
-------------

Set parameter default value or other option; runs during parsing.
Usage: "S", followed by zero or more parameters, each with a value.

Parameters:
	f	Set default O "f" (frequency, Hz) value; defaults to 444.
	r	Set default O "r" (frequency ratio) value; defaults to 1.
	t	Set default O "t" (time, seconds) value; defaults to 1.
	a	Set multiplier for O "a" (amplitude) value, applied when
		adding a top-level carrier. If used, this disables automatic
		down-scaling of amplitude by the number of voices, for
		manual control instead.
	n	Sets A4 tuning (Hz) for O "f" (frequency, Hz) value using
		note syntax; defaults to 444.

Operator: O (followed by wave type)
-----------------------------------

Add operator. If a carrier and not a modulator, adds sound at current time
position, playing for the time duration.

Usage: "O" followed by (initial) wave type (e.g. "Osin"), followed by zero
or more parameters, each with a value.

Wave types:
	sin	Sine.
	sqr	Square (naive).
	tri	Triangle (naive).
	saw	Saw (naive).
			Increasing slope; use negative amplitude
			or frequency for decreasing slope.
	sha	Half-frequency absolute sine (adjusted).
			Frequency halved to restore base frequency,
			peak amplitude centered and doubled, phase
			shifted to begin and end at zero amplitude.
			A softer alternative to "saw" (saw wave).
	szh	Half-zero'd sine (adjusted).
			Positive half kept, negative half zero'd,
			peak amplitude centered and doubled, phase
			shifted to begin and end at zero amplitude.
			A warm and full sound.
	shh	First quarter of sine (adjusted).
			The upwards-ramping first quarter of a sine,
			peak amplitude centered and doubled.
			Slightly warmer and fuller than "saw" (saw wave).
	ssr	Square root of sine.
			Mirrored for the negative half.
			A softer alternative to "sqr" (square wave).

Parameters:
	t	Time duration in seconds. If no t setting is given, the
		time set depends on the context.
			For a single non-nested operator, 1 is used unless
		the default value is changed with "S t".
			When several operators are specified at the same
		time and time is explicitly set for at least one, the
		default time is the combined duration of their play.
		(t* can also be used to specify this explicitly.)
			For nested operators, i.e. modulators, the default
		time is infinite (can also be set as "ti"), meaning they
		play whenever a carrier they are linked to does. Infinite
		duration is only supported for nested operators, all scripts
		having finite duration.
			For a composite event, the first part is given the
		S default value if none set. The following parts will each
		in turn be given the value of the preceding part if not
		explicitly set - with the exception of nested operators for
		the last part, which will have infinite time (ti) by default.
	f	Frequency in Hz. Can be negative to flip wave shape timewise.
			Gradual value adjustment also supported; see section.
	f![]	A second frequency in Hz may follow the "!", for a range to
		use with FM by wave or envelope.
			A list of modulator operators may be specified
		within "[]"; this list replaces any previous FM modulators
		set, and may be empty. Each modulator will produce a result
		in a 0.0 to 1.0 range, i.e. a positive signal, multiplied by
		its amplitude parameter (defaulting to 1.0).
			The product of the modulator amplitudes is used to
		frequency-modulate the carrier(s), be they the final
		carrier(s) or in turn modulator(s) for one or more other
		carrier(s).
	r	(For modulator operators only.) Frequency ratio of carrier
		to modulator. Keeps frequency that of the carrier divided by
		the given number. May be used in the form r(n/m) for an
		n:m ratio.
			Gradual value adjustment also supported; see section.
	r![]	(For modulator operators only.) A second frequency ratio,
		for a range to use with FM by wave or envelope.
			A list of modulator operators may be specified
		within "[]"; this list replaces any previous FM modulators
		set, and may be empty. Each modulator will produce a result
		in a 0.0 to 1.0 range, i.e. a positive signal, multiplied by
		its amplitude parameter (defaulting to 1.0).
			The product of the modulator amplitudes is used to
		frequency-modulate the carrier(s), be they the final
		carrier(s) or in turn modulator(s) for one or more other
		carrier(s).
	a	Amplitude, where 1.0 corresponds to a level of 0dB and
		0.0 is silence. (Note that the final output level is scaled
		down by the number of voices; alternatively, the S "a" option
		can be used to set a multiplier used when adding a top-level
		carrier. Panning will further reduce output level unless
		fully left or right.) Can be negative to flip sign of result.
			Gradual value adjustment also supported; see section.
	a![]	A second amplitude may follow the "!", for a range to use
		with AM by wave or envelope.
			A list of modulator operators may be specified
		within "[]"; this list replaces any previous AM modulators
		set, and may be empty. Each modulator will produce a result
		in a 0.0 to 1.0 range, i.e. a positive signal, multiplied by
		its amplitude parameter (defaulting to 1.0).
			The product of the modulator amplitudes is used to
		amplitude-modulate the carrier(s), be they the final
		carrier(s) or in turn modulator(s) for one or more other
		carrier(s).
	p	Set the beginning phase of the wave. For example, p(3/4) will
		make a sine or triangle wave begin at its "bottom". This is
		mostly used where wanted for waves used by f!/r! or a!.
	p+[]	A list of PM modulator operators may be specified within "[]";
		this list replaces any previous PM modulators set, and may be
		empty.
			The sum of the modulator amplitudes is used to
		phase-modulate the carrier(s), be they the final carrier(s)
		or in turn modulator(s) for one or more other carrier(s).
	s	Silent time before playing, time in seconds.
			Works like adding a delay, except it only affects this
		operator.
	w	Set (change) wave type. See list of wave types for values.

Panning: P
----------

Set the panning (left-right "balance") of the voice associated with
the present operator(s), affecting the left and right output levels.
Value range is 0 (all-left) to 1 (all-right). Default is 0.5 (center).
Panning not at either extreme end will reduce level.
		Gradual value adjustment also supported; see section.

Quit: Q
-------

Quit script; end parsing, turning all that follows into a comment.
(Optional.)

Generally, comments are added using "#" (line comment) instead.

Values and expressions
----------------------

Whitespace is not allowed within multi-character names, keywords or
numbers, and separates values. Spaces and tabs may otherwise be used or
omitted anywhere.

Following a "#", the rest of a line is commented out.

Numerical expressions are allowed within parentheses, allowing numbers
to be specified using basic arithmetic and freely placed whitespace.

Gradual value adjustment:
	Some parameters are noted to support this. Instead of typing the
	value directly, the following sub-parameters are specified within
	"{}" (curly brackets):
	v	Target value.
	t	Time to reach target value.
	c	Change type; either lin, exp or log. (exp and log use
		ear-tuned polynomial approximations designed to sound
		natural, and which are symmetric to one another.)

Parameters and operator binding:
	When specifying or referencing operators within "@[...]", any
	parameters set following the closing ']' will be bound to and apply
	to all of them.
		Significantly, this allows multiple carriers (given within
	the []) to be linked to the same modulator(s), whether for FM, PM,
	or AM. (Note: Support for this is experimental and incomplete.)

Labels and referencing:
	Any operator when specified may be prefixed by "'label " in order
	to define a label for it, where the label consists of alphanumeric
	characters and/or '_'; thereafter the label can be referenced using
	"@label", to place future changes later in the script.

Frequencies as notes:
	Frequency values may be specified as notes. Currently, justly
	intoned C-major scale is supported; "S n" sets the A4 tuning
	(default 444Hz).
		The value consists of the note (C, D, E, F, G, A or B),
	optionally given a prefix and/or suffix. The prefix is an optional
	subnote (c, d, e, f, g, a or b) inside an inner octave (between
	note and next note). The suffix is an optional s (sharp) or
	f (flat), and/or, in the last position, an octave number
	(from 0-10, default 4).

Timing
------

A new event terminates the previous one, but they will have the same
placement in time unless a delay is added.

At the topmost script scope, newlines also terminate events; within
sub-scopes, however, newlines may be placed freely.

Timing modifiers:
	|	Time separator. Delays what follows by the duration of
		prior events. This is independent of delay added
		with "\".
	\	Delay the next event and all following ones, time in
		seconds. Alternatively, \t will delay by the time of the
		last event.

Composite events:
	Writing a ';' (on a new line or the same line) after an event will
	allow specifying new parameter arguments to apply at the end of the
	previous duration; this can be repeated.
		This makes it possible to write a sequence of events as if
	a single "composite event", not having to insert delays that affect
	the timing of events later written, thus increasing the flexibility
	of how changes to operators may be positioned in a script.
