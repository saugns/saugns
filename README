sgensys is the Sound GENeration SYStem, a sound synthesis program
and scripting language. A very lightweight system for mathematical
sound synthesis, it doesn't support using pre-recorded samples.

While developed with the aim of becoming useful for writing
electronic music, the language is still very simple and the audio
retro-ish. It is however easy to use for experimenting with sounds.

A collection of basic wave types are supported, as well
as AM/RM, FM, and PM (the "FM" of most commercial synthesizers).
An arbitrary number of oscillators can be used.

The program reads Sound Generation Script files or strings.
Output can be to system audio, and/or a 16-bit PCM WAV file.

Tested mainly on x86 and x86-64. Comes with support for
running on DragonFly, FreeBSD, Linux, NetBSD, and OpenBSD.
The following audio systems are expected:
	DragonFly	OSS
	FreeBSD  	OSS
	Linux    	ALSA or OSS
	NetBSD   	OSS
	OpenBSD  	sndio

Building and installing
=======================

Building requires a C99 compiler and `make` (GNU or BSD).
On Linux systems, the ALSA library must be installed to build.
In the cases of the 4 major BSDs, the base systems have it all.

A simple test after building is the following, which should
play a sine wave at 440 Hz for 1 second:
	./sgensys -e "Osin"

`make install` will by default copy 'sgensys' to '/usr/local/bin/',
and the contents of 'examples/' to '/usr/local/share/sgensys/'.
(`make uninstall` removes the sgensys binary and directory.)

Licensing
=========

sgensys is distributed under the terms of the GNU Lesser General
Public License (LGPL), version 3 or later. See the file COPYING
for details, or <https://www.gnu.org/licenses/>.

Some files are licensed under more permissive terms, such as
the ISC license (2-clause-BSD-equivalent), or
the 0BSD license (public-domain-equivalent shorter version);
see the heading comment text of source files.

The example and test scripts included as input for the program
currently do not have any explicit licensing. If needed in the
future, some Creative Commons license will be used. Feel free
to copy from the current ones for your own scripts.

Script syntax overview
======================

General description
-------------------

The core idea of the language is that of time-ordered steps for
configuring audio generation: add an oscillator, then later,
change a parameter and extend play duration, etc. A script is
basically a list of such timed instructions. Language constructs
also offer more flexible arrangement of steps to take than a
bare flat list of instructions and forward time movement.

The current syntax uses keywords followed by zero or more
parameters with arguments. Each main keyword provides an action,
either at run time (like a function call in other languages),
or at parse time (like a global script setting).

The most important keyword, "O" followed by a wavetype, adds an
operator (FM synth terminology for oscillator with a certain
configurability). They may be connected as carriers and modulators.
They, and the timing of their running, make the core features of
the scripting language.

Keyword parameters may either be set (named, followed by writing
their argument(s)), or left out to use the previous value or a
default value. Some default values can be changed using the "S"
(set option) parse-time action.

Modifiers are similar to keywords, but simpler and more flexible
in how they may be used. They may or may not be followed by an
argument (e.g. a delay time).

Keywords
--------

Each of these keywords is further described in its own section below.
	S	Set option (parameter default value or other);
		runs during parsing.
	O	Add operator, as in oscillator with parameters;
		a carrier and/or modulator which produces sound
		for a duration; the "O" is followed by the (initial)
		wave type, as in "Osin".
	P	Panning for the voice at the current location; to be
		followed by the new value.
	Q	Quit script; end parsing, commenting out all that follows.
		Optional. (Commenting more generally uses "#", "//",
		or "/*...*/" syntax.)

See the section 'Timing' for modifiers.

S: Set option
-------------

Set parameter default value or other option; runs during parsing.
Usage: "S", followed by zero or more parameters, each with a value.

Parameters:
	f	Set default O "f" (frequency, Hz) value; defaults to 440.
	r	Set default O "r" (relative frequency) value; defaults to 1.
	t	Set default O "t" (time, seconds) value; defaults to 1.
	a	Set multiplier for O "a" (amplitude) value, applied when
		adding a top-level carrier. If used, this disables automatic
		down-scaling of amplitude by the number of voices, for
		manual control instead.
	n	Sets A4 tuning (Hz) for O "f" (frequency, Hz) value using
		note syntax; defaults to 440.

O: Operator
-----------

Add operator, as in oscillator with parameters. If a carrier
and not a modulator, adds sound at current time position,
playing for the time duration.

Usage: "O" followed by (initial) wave type (e.g. "Osin"),
followed by zero or more parameters, each with a value.

Wave types:
	sin	Sine.
			For cosine, use (1/4) phase.
	sqr	Square.
	tri	Triangle.
	saw	Saw.
			Increasing slope; use negative amplitude
			or frequency for decreasing slope.
	ahs	Absolute half-frequency sine (adjusted).
			Sine-based parabola-like wave.
			Frequency halved to restore base frequency,
			peak amplitude centered and doubled, phase
			shifted to begin and end at zero amplitude.
			A softer alternative to "saw" (saw wave).
	hrs	Half-rectified sine (adjusted).
			Positive half kept, negative half zero'd.
			Peak amplitude centered and doubled, phase
			shifted to begin and end at zero amplitude.
			A warm and full sound.
	srs	Square root of sine.
			Mirrored for the negative half.
			A softer alternative to "sqr" (square wave).
	ssr	Squared & square root of sine.
			A little more thin and sharp, it differs from
			"srs" a little like "srs" differs from "szh".

Parameters:
	t	Time duration in seconds. If no "t" setting is given, the
		time set depends on the context.
			For a single non-nested operator, 1.0 is used unless
		the default value is changed with "S t".
			When several operators are specified, the default
		time is based on the longest remaining (at the current time)
		duration of play in use for any step at the current level,
		in considering the surrounding sequence of steps and delays
		(up to the next '|' time separator, or to the end of the
		script if none).
			For modulator operators, default time is however an
		"implicit" time length (see 'i' below), meaning playing
		whenever a carrier it is linked to does. (Implicit time is
		only supported for nested operators.) When such a time length
		is retrieved as part of setting the default time for something
		else, a definite default time in seconds (e.g. 1 second) is
		however used instead.
			For a compound step, the first sub-step is however
		simply given the "S t" default value if no time is set.
		The following sub-steps in turn each have the time of the
		previous as its default time. The exception is modulators,
		for which the last sub-step has implicit time by default.
			Special non-number literals can also specify time:
		d	Definite default time can be set using "td", always.
		i	Implicit time can be set using "ti", for modulators.
	f	Frequency in Hz. Can be negative to flip wave shape timewise.
			"Value ramp" values are supported; see section.
			"Modulation with value range" is supported for FM
		(frequency modulation); see section.
	r	(For modulator operators only.) Relative frequency, a value
		which will be multiplied by the carrier frequency to give
		the frequency to use. For an n:m carrier-modulator frequency
		ratio, a value of the form (m/n) may be used; e.g., for a
		3:4 frequency ratio, "r(4/3)".
			Note that for FM modulators, the carrier frequency
		used as a multiplier is simply the unmodulated value. For
		other modulators, if FM is done the result will be used.
			"Value ramp" values are supported; see section.
			"Modulation with value range" is supported for FM
		(frequency modulation); see section.
	a	Amplitude, where 1.0 corresponds to a level of 0dB and
		0.0 is silence. (Note that the final output level is scaled
		down by the number of voices; alternatively, the S "a" option
		can be used to set a multiplier used when adding a top-level
		carrier. Panning will further reduce output level unless
		fully left or right.) Can be negative to flip sign of result.
			"Value ramp" values are supported; see section.
			"Modulation with value range" is supported for AM & RM
		(amplitude and ring modulation); see section.
	p	Set the phase of the wave, and/or PM (phase modulation)
		modulators to use.
			A value modulo 1.0 is used to set phase as a
		percentage of the wave cycle. For example, p(3/4) will move
		a sine or triangle wave to its "bottom". This is mostly
		useful for changing the initial phase.
			After a value or by itself, "[]" (square brackets)
		can be used to set a list of modulator operators specified
		within the "[]"; the list replaces any previous modulators
		set, and may be empty.
			The sum of modulator amplitudes is used to
		phase-modulate the carrier(s).
	w	Wave type. See "Wave types" for values.

P: Panning
----------

Set the panning (left-right "balance") of the voice associated with
the present operator(s), affecting the left and right output levels.
Value range is 0 (all-left) to 1 (all-right). Default is 0.5 (center).
Panning not at either extreme end will reduce level.
		"Value ramp" values are supported; see section.

Q: Quit
-------

Quit script; end parsing, commenting out all that follows.
Optional.

Commenting more generally uses "#" or "//" line comments,
or "/*...*/" C-style block comments.

Values and expressions
----------------------

Whitespace is not allowed within multi-character names, keywords or
numbers, and separates values. Spaces and tabs may otherwise be used or
omitted anywhere.

Following a "#" or "//", the rest of a line is commented out.
Following "/*", text is commented out until "*/" is encountered.

Numerical expressions:
	A number can be specified with or without a decimal point;
	for a number with a decimal point, a leading zero can be omitted.
	Number signs and arithmetic operation symbols can be used in infix
	expressions. But unless something is written within parentheses,
	it cannot contain any whitespace, as it ends the expression. For
	example, "-1" is fine, but "- 1" is a dangling minus followed by
	a dangling number 1, if not inside parentheses as "(- 1)".
		The following operations are recognized, and grouped below by
	priority (nested parentheses can be used to change evaluation order):
		^	To the power of (right-associative)
		* / %	Multiplication, division, remainder
		+ -	Addition, subtraction
	Parentheses also allow shorthand multiplication (leaving out a
	"*" between two parts), e.g. "2(3)" and "(2)3" both give "6".
		Some parameters support named constants specific to that type
	of value. Such a name can be written instead of a number.

Value ramp:
	To ramp, or sweep, a parameter which supports this towards a
	goal value -- the ordinary value being the start for a trajectory --
	following the ordinary value or by itself, the following value ramp
	subparameters can be given values within "{}" (curly brackets):
	v	Goal value.
	t	Time to reach goal (default is the external "t" duration).
	c	Ramp curve type (default 'lin'):
			hold	Hold old value until time.
			lin	Linear trajectory over time.
			exp	Exponential-like increase or decrease.
			log	"log(1 + x)"-like increase or decrease.
			xpe	Exponential-like envelope (saturate or decay).
			lge	"log(1 + x)"-like envelope (saturate or decay).
			cos	A "cos(x)"-like falling or rising trajectory.
		(The 'xpe' and 'lge' types use ear-tuned polynomial
		approximations with definite beginnings and ends,
		designed to sound natural, and symmetric one to another.
		The 'xpe' increases like 'log' and decreases like 'exp',
		like a capacitor, natural-sounding for envelope-like use.
		The 'lge' increases like 'exp' and decreases like 'log'.)

Modulation with value range:
	Amplitude and frequency (and relative frequency) parameters support
	modulation of the parameter values within a bounded value range.
	(For amplitude, whether this modulation is called amplitude
	modulation (AM) or ring modulation (RM) is a matter of the value
	range. Ring modulation has the same magnitude for the upper and
	lower bound, but with differing sign, while classic amplitude
	modulation has one of the bounds set to zero.)
		Following the letter specifying the parameter, and optionally
	the main value, the second value used for the bounds of the range,
	and/or a list of modulator operators, can follow after ",w" (where the
	"w" is short for wave envelope). These parts of the larger argument
	are ordered and cannot contain any whitespace outside parentheses or
	brackets. The second value defaults to 0.0 if not set for the object.
	"Value ramp" is supported for the second value whenever for the main.
		After ",w" and optionally a value, "[]" (square brackets) can
	be used to set a list of modulator operators specified within the
	"[]"; the list replaces any previous set, and may be empty.
		Each modulator in the list will produce a result in the range
	of 0.0 to 1.0, i.e. a positive signal, multiplied by its amplitude
	parameter (defaulting to 1.0), negative amplitude multipliers having
	the effect of switching the top and bottom of the 0.0 to 1.0 range.
	Setting (changing) the amplitude for modulators will thus change
	the range when the absolute value is not 1.0, but this is allowed
	for the sake of flexibility.
		The product of modulator amplitudes is mapped to the value
	range; 0.0 means the main value and 1.0 means the second value.
	This adds a bias towards the main value with more modulators used.

Parameters and operator binding:
	When specifying or referencing operators within "@[...]", any
	parameters set following the closing ']' will be bound to and apply
	to all of them.
		Significantly, this allows multiple carriers (given within
	the []) to be linked to the same modulator(s), whether for FM, PM,
	or AM/RM. (Note: Support for this is experimental and incomplete.)

Labels and referencing:
	An object can be assigned a label by inserting "'name " in front of
	adding the object, where the "name" is a case-sensitive string with
	alphanumeric characters and/or '_'. The label can then be used to
	refer back to the object as "@name", to start a new step for the
	object anywhere later in the script.
		Such a new "@name" step does not automatically set a new
	time duration for the object, so "t" (see "Parameters") or other
	time-altering syntax (see "Timing") must be used in order for the
	old time duration value to be changed.
		Note that a "@name" reference placed in a nesting scope
	different from the original (e.g. outside a list, or in a new list)
	does not move the object into the new nesting scope. It will not be
	added to, nor removed from, any list by being referenced anywhere.
	The time scope is however new and of the reference.

Frequencies as notes:
	Frequency values may be specified as notes. Currently, justly
	intoned C-major scale is supported; "S n" sets the A4 tuning
	(default 440 Hz).
		The value consists of the note (C, D, E, F, G, A or B),
	optionally given a prefix and/or suffix. The prefix is an optional
	subnote (c, d, e, f, g, a or b) inside an inner octave (between
	note and next note). The suffix is an optional s (sharp) or
	f (flat), and/or, in the last position, an octave number
	(from 0-10, default 4).

Timing
------

A new step terminates the previous one, but they will have the same
placement in time unless a delay is added.

At the topmost script scope, newlines also terminate steps; within
sub-scopes, however, newlines may be placed freely.

Timing modifiers:
	|	Time separator. Delays all that follows by the duration of
		prior steps. This also resets any other delays to be added
		to later steps using other syntax like '/', so such should
		be placed after, not before, if it is to take effect.
	/	Forward shift, time in seconds. Delay the next step and
		all steps placed after. The next step can be either a
		split-out continuation of the current step, or new.
			Does not automatically extend time duration on
		splitting a step, unlike '\'.
	\	Subshift, time in seconds. For a current step only,
		split out a delayed follow-on step, without delaying
		any independent steps placed after. Depending on usage,
		may move, alternatively extend, the current sound in time.
			For ease of adding silent time padding, before the
		"\number" part (but not after it) the default time duration
		is changed to 0, so that any time value automatically set
		there will be 0. After the "\number" part, a time value is
		always set, the last "t" or default (before zeroing) value.
			Several uses of '\' to separate sub-steps in a row
		(e.g. no ';' in-between) never zero the default time after
		the first '\'.

Compound steps:
	The ';' sub-step separator can be written (on a new line or the same)
	after a step to specify new parameter arguments for an object, which
	apply just after the previous time duration, for a new duration which
	defaults to the length of the previous. (For the default time of the
	first sub-step, and about special handling for the last, see "t" under
	each "Parameters" for more). The use of ';' can be repeated.
		The time handling is designed to simplify writing a sequence
	of connected, non-overlapping timed updates for a single object. For
	example (three frequencies, one a second): "Osin f100 t1; f200; f300".
	Changing "t1" in this example changes time length for all three parts.
		For more flexibility, such as "silent" gaps between parts or
	overlapping parts, ';' can be combined with the '\' subshift, as in
	"; \number", which subdivides the part after the ';' into one before
	the '\' and one after, "number" seconds apart in time. The first has
	a default time duration of zero, for the second it is normal. For
	example, to insert "silent" gaps between the use of three values:
	"Osin f100 t1; \1 f200; \1 f300".
