sgensys is the Sound GENeration SYStem, a sound synthesis program
and scripting language. A very lightweight system for mathematical
sound synthesis, it doesn't support using pre-recorded samples.

While developed with the aim of becoming useful for writing
electronic music, the language is still very simple and the audio
retro-ish. It is however easy to use for experimenting with sounds.

8 basic wave types are supported, as well as AM, FM, and PM (the
"FM" of most commercial synthesizers). An arbitrary number of
oscillators can be used.

The program reads a Sound Generation Script file or string.
Output can be to system audio, and/or a 16-bit PCM WAV file.

Tested mainly on x86 and x86-64. Comes with support for
running on DragonFly, FreeBSD, Linux, NetBSD, and OpenBSD.
The following audio systems are expected:
	DragonFly	OSS
	FreeBSD  	OSS
	Linux    	ALSA or OSS
	NetBSD   	OSS
	OpenBSD  	sndio

Building and installing
=======================

Building requires a C99 compiler and `make` (GNU or BSD).
On Linux systems, the ALSA library must be installed to build.
In the cases of the 4 major BSDs, the base systems have it all.

A simple test after building is the following, which should
play a sine wave at 440 Hz for 1 second:
	./sgensys -e "Osin"

There is currently no install script or target provided. After
building, the 'sgensys' binary and the 'examples/' directory
can be copied.

Licensing
=========

sgensys is distributed under the terms of the GNU Lesser General
Public License (LGPL), version 3 or later. See the file COPYING
for details, or <https://www.gnu.org/licenses/>.

The example and test scripts included as input for the program
currently do not have any explicit licensing. If needed in the
future, some Creative Commons license will be used. Feel free
to copy from the current ones for your own scripts.

Script syntax overview
======================

General description
-------------------

The core idea of the language is that of time-ordered steps for
configuring audio generation: add an oscillator, then later,
change a parameter and extend play duration, etc. A script is
basically a list of such timed instructions. Language constructs
also offer more flexible arrangement of steps to take than a
bare flat list of instructions and forward time movement.

The current syntax uses keywords followed by zero or more
parameters with arguments. Each main keyword provides an action,
either at run time (like a function call in other languages),
or at parse time (like a global script setting).

The most important keyword, "O" followed by a wavetype, adds a
wave oscillator. They may be connected as carriers and modulators.
They, and the timing of their running, make the core features of
the scripting language.

Keyword parameters may either be set (named, followed by writing
their argument(s)), or left out to use the previous value or a
default value. Some default values can be changed using the "S"
(set option) parse-time action.

Modifiers are similar to keywords, but simpler and more flexible
in how they may be used. They may or may not be followed by an
argument (e.g. a delay time).

Keywords
--------

Each of these keywords is further described in its own section below.
	S	Script options (parameter default value or other);
		runs during parsing.
	O	Wave oscillator; the "O" is followed by the (initial)
		wave type, as in "Osin".
	P	Panning for the voice at the current location; to be
		followed by the new value.
	Q	Quit script; end parsing, turning all that follows
		into a comment. (Optional.) Other ways to comment exist.

See the section 'Timing' for modifiers.

S: Script options
-----------------

Set parameter default value or other option; runs during parsing.
Usage: "S", followed by zero or more parameters, each with a value.

Parameters:
	a	Set multiplier for O "a" (amplitude) value, applied when
		adding a top-level carrier. If used, this disables automatic
		down-scaling of amplitude by the number of voices, for
		manual control instead.
	f	Set default O "f" (frequency, Hz) value; defaults to 440.
		,n	Set A4 tuning (Hz) for O "f" (frequency, Hz)
			value using note syntax; defaults to 440.
	r	Set default O "r" (relative frequency) value; defaults to 1.
	t	Set default O "t" (time, seconds) value; defaults to 1.

O: Wave oscillator
------------------

Wave oscillator. (The sine variety can be used as a typical
FM synthesizer operator.) If not used as a modulator,
the output will be added as a sound at the current
time position, playing for the time duration.

Usage: "O" followed by (initial) wave type (e.g. "Osin"),
followed by zero or more parameters, each with a value.

Wave types:
	sin	Sine.
	sqr	Square (naive).
	tri	Triangle (naive).
	saw	Saw (naive).
			Increasing slope; use negative amplitude
			or frequency for decreasing slope.
	sha	Half-frequency absolute sine (adjusted).
			Frequency halved to restore base frequency,
			peak amplitude centered and doubled, phase
			shifted to begin and end at zero amplitude.
			A softer alternative to "saw" (saw wave).
	szh	Half-zero'd sine (adjusted).
			Positive half kept, negative half zero'd,
			peak amplitude centered and doubled, phase
			shifted to begin and end at zero amplitude.
			A warm and full sound.
	shh	First quarter of sine (adjusted).
			The upwards-ramping first quarter of a sine,
			peak amplitude centered and doubled.
			Slightly warmer and fuller than "saw" (saw wave).
	ssr	Square root of sine.
			Mirrored for the negative half.
			A softer alternative to "sqr" (square wave).

Parameters:
	t	Time duration in seconds. If no "t" setting is given, the
		time set depends on the context.
			For a single non-nested oscillator, 1.0 is used unless
		the default value is changed with "S t".
			When several oscillators are specified, the default
		time is based on the longest remaining (at the current time)
		duration of play in use for any step at the current level,
		in considering the surrounding sequence of steps and delays
		(up to the next '|' time separator, or to the end of the
		script if none).
			For modulator oscillators, default time is however
		an "implicit" time length (see 'i' below), meaning playing
		whenever a carrier it is linked to does. (Implicit time is
		only supported for nested oscillators.) When such a time
		length is retrieved as part of setting the default time for
		something else, a definite default time in seconds (e.g. 1
		second) is however used instead.
			For a compound step, the first sub-step is however
		simply given the "S t" default value if no time is set.
		The following sub-steps in turn each have the time of the
		previous as its default time. The exception is modulators,
		for which the last sub-step has implicit time by default.
			Special non-number literals can also specify time:
		d	Definite default time can be set using "td", always.
		i	Implicit time can be set using "ti", for modulators.
	f	Frequency in Hz. Can be negative to flip wave shape timewise.
			Value ramp also supported; see section.
	f,w[]	A second frequency in Hz may follow the ",w", for a range to
		use with FM by wave or envelope.
			A list of modulator oscillators may be specified
		within "[]"; this list replaces any previous FM modulators
		set, and may be empty. Each modulator will produce a result
		in a 0.0 to 1.0 range, i.e. a positive signal, multiplied by
		its amplitude parameter (defaulting to 1.0).
			The product of the modulator amplitudes is used to
		frequency-modulate the carrier(s).
	r	(For modulator oscillators only.) Relative frequency, a value
		which will be multiplied by the carrier frequency to give
		the frequency to use. For an n:m carrier-modulator frequency
		ratio, a value of the form (m/n) may be used; e.g., for a
		3:4 frequency ratio, "r(4/3)".
			Value ramp also supported; see section.
	r,w[]	(For modulator oscillators only.) A second relative frequency,
		for a range to use with FM by wave or envelope.
			A list of modulator oscillators may be specified
		within "[]"; this list replaces any previous FM modulators
		set, and may be empty. Each modulator will produce a result
		in a 0.0 to 1.0 range, i.e. a positive signal, multiplied by
		its amplitude parameter (defaulting to 1.0).
			The product of the modulator amplitudes is used to
		frequency-modulate the carrier(s).
	a	Amplitude, where 1.0 corresponds to a level of 0dB and
		0.0 is silence. (Note that the final output level is scaled
		down by the number of voices; alternatively, the S "a" option
		can be used to set a multiplier used when adding a top-level
		carrier. Panning will further reduce output level unless
		fully left or right.) Can be negative to flip sign of result.
			Value ramp also supported; see section.
	a,w[]	A second amplitude may follow the ",w", for a range to use
		with AM by wave or envelope.
			A list of modulator oscillators may be specified
		within "[]"; this list replaces any previous AM modulators
		set, and may be empty. Each modulator will produce a result
		in a 0.0 to 1.0 range, i.e. a positive signal, multiplied by
		its amplitude parameter (defaulting to 1.0).
			The product of the modulator amplitudes is used to
		amplitude-modulate the carrier(s).
	p	Set the beginning phase of the wave. For example, p(3/4) will
		make a sine or triangle wave begin at its "bottom". This is
		often more useful for modulators used by "f,w"/"r,w" or "a,w".
	p[]	A list of PM modulator oscillators may be specified within the
		"[]"; this list replaces any previous PM modulators set, and
		may be empty.
			The sum of the modulator amplitudes is used to
		phase-modulate the carrier(s).
	s	Silent time before playing, time in seconds.
			Works like adding a delay, except it only affects this
		oscillator.
	w	Set (change) wave type. See list of wave types for values.

P: Panning
----------

Set the panning (left-right "balance") of the voice associated with
the present oscillator(s), affecting the left and right output levels.
Value range is 0 (all-left) to 1 (all-right). Default is 0.5 (center).
Panning not at either extreme end will reduce level.
		Value ramp also supported; see section.

Q: Quit
-------

Quit script; end parsing, turning all that follows into a comment.
(Optional.)

Generally, comments are added using "#" (line comment) instead.

Values and expressions
----------------------

Whitespace is not allowed within multi-character names, keywords or
numbers, and separates values. Spaces and tabs may otherwise be used or
omitted anywhere.

Following a "#", the rest of a line is commented out.

Numerical expressions:
	A number can be specified with or without a decimal point;
	for a number with a decimal point, a leading zero can be omitted.
	Number signs and arithmetic operation symbols can be used in infix
	expressions. But unless something is written within parentheses,
	it cannot contain any whitespace, as it ends the expression. For
	example, "-1" is fine, but "- 1" is a dangling minus followed by
	a dangling number 1, if not inside parentheses as "(- 1)".
		The following operations are recognized, and grouped below by
	priority (nested parentheses can be used to change evaluation order):
		^	To the power of (right-associative)
		* / %	Multiplication, division, remainder
		+ -	Addition, subtraction
	Parentheses also allow shorthand multiplication (leaving out a
	"*" between two parts), e.g. "2(3)" and "(2)3" both give "6".
		Some parameters support named constants specific to that type
	of value. Such a name can be written instead of a number.

Value ramp:
	To ramp, or sweep, a parameter which supports this towards a
	goal value -- the ordinary value being the start for a trajectory --
	following the ordinary value or by itself, the following value ramp
	subparameters can be given values within "{}" (curly brackets):
	v	Goal value.
	t	Time to reach goal value.
	c	Change type; either lin, exp or log. (exp and log use
		ear-tuned polynomial approximations designed to sound
		natural, and which are symmetric to one another.)

Parameters and object binding:
	When specifying or referencing objects within "@[...]", any
	parameters set following the closing ']' will be bound to and apply
	to all of them.
		Significantly, this allows multiple carriers (given within
	the []) to be linked to the same modulator(s), whether for FM, PM,
	or AM. (Note: Support for this is experimental and incomplete.)

Labels and referencing:
	An object can be assigned a label by inserting "'name " in front of
	adding the object, where the "name" is a case-sensitive string with
	alphanumeric characters and/or '_'. The label can then be used to
	refer back to the object as "@name", to start a new step for the
	object anywhere later in the script.
		Such a new "@name" step does not automatically set a new
	time duration for the object, so "t" (see "Parameters") or other
	time-altering syntax (see "Timing") must be used in order for the
	old time duration value to be changed.
		Note that a "@name" reference placed in a nesting scope
	different from the original (e.g. outside a list, or in a new list)
	does not move the object into the new nesting scope. It will not be
	added to, nor removed from, any list by being referenced anywhere.
	The time scope is however new and of the reference.

Frequencies as notes:
	Frequency values may be specified as notes. Currently, justly
	intoned C-major scale is supported; "S f,n" sets the A4 tuning
	(default 440 Hz).
		The value consists of the note (C, D, E, F, G, A or B),
	optionally given a prefix and/or suffix. The prefix is an optional
	subnote (c, d, e, f, g, a or b) inside an inner octave (between
	note and next note). The suffix is an optional s (sharp) or
	f (flat), and/or, in the last position, an octave number
	(from 0-10, default 4).

Timing
------

A new step terminates the previous one, but they will have the same
placement in time unless a delay is added.

At the topmost script scope, newlines also terminate steps; within
sub-scopes, however, newlines may be placed freely.

Timing modifiers:
	|	Time separator. Delays what follows by the duration of
		prior steps. This is independent of delay added
		with "\".
	\	Delay the next step and all following ones, time in
		seconds. Alternatively, \t will delay by the time of the
		last step.

Compound steps:
	The ';' sub-step separator can be written (on a new line or the same)
	after a step to specify new parameter arguments for an object, which
	apply just after the previous time duration, for a new duration which
	defaults to the length of the previous. (For the default time of the
	first sub-step, and about special handling for the last, see "t" under
	each "Parameters" for more). The use of ';' can be repeated.
		The time handling is designed to simplify writing a sequence
	of connected, non-overlapping timed updates for a single object. For
	example (three frequencies, one a second): "Osin f100 t1; f200; f300".
