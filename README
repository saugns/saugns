mgensys is the Music GENeration SYStem; it reads script files or strings,
and can output to system audio and/or a 16-bit PCM WAV file.

(This is an experimental redesign of the saugns program. The saugns program
is the more mature and stable version. This program reworks the design from
a much earlier starting point; if it becomes better, it will become the new
saugns program.)

The program as a whole is licensed under LGPL-3.0+, see COPYING for details.
Various smaller files are permissively licensed, see their heading comments.

Script syntax
-------------

Values can be of several main types, each with its own syntax:
 * Numbers; Numerical expressions.
 * Objects; Types S, L, N, W.
 * Arrays.

Numerical expressions:
	A number can be specified with or without a decimal point;
	for a number with a decimal point, a leading zero can be omitted.
	Number signs and arithmetic operation symbols can be used in infix
	expressions. But unless something is written within parentheses,
	it cannot contain any whitespace, as it ends the expression. For
	example, "-1" is fine, but "- 1" is a dangling minus followed by
	a dangling number 1, if not inside parentheses as "(- 1)".
		The following operations are recognized, and grouped below by
	priority (nested parentheses can be used to change evaluation order):
		^	To the power of (right-associative)
		* / %	Multiplication, division, remainder
		+ -	Addition, subtraction
	Parentheses also allow shorthand multiplication (leaving out a
	"*" between two parts), e.g. "2(3)" and "(2)3" both give "6".
		Some parameters support named constants specific to that type
	of value. Such a name can be written instead of a number.

Object types, e.g. "W" (Wave oscillator), have one-letter uppercase names. To
create an instance, the letter is written, followed by any required argument.
Additional parameters have one-letter lowercase names, optionally written for
assigning non-default value(s).

The letter "S" behaves like an object type, but is used to set global options.

Arrays of objects are created using curly brackets ("{" and "}"), and used to
set modulators. They are not currently allowed in other contexts.

A newline ends the scope for assigning values to an object, unless within
parentheses or brackets part of a value. "<" and ">" allow nesting the scope
for value assignments; the object prior to the < remains in scope until new
objects are given, and a newline or a > will return to the object for which
the < was given.

Each object instance and value assignment has a time position, beginning at
0 seconds. Time delay modifiers advance the time position.

S -- Script options
	Set default value or other global option in the script.
	a	Amplitude multiplier for all carrier waves. Starts at 1.0.
		Effectively a global volume control.
	c	Default channel mixing value. Starts at 0.0, i.e. C (center).
		Useful as a main way of setting the parameter value;
		see "Channel mixing values" for more.
	f	Default carrier frequency in Hz. Starts at 100.0.
	r	Default carrier-modulator frequency ratio (for modulators),
		as multiple of the carrier frequency. Starts at 1.0.
	t	Default time duration in seconds. Starts at 1.0.

Signal generator common parameters
	Named parameters common to types L, N, and W.
	t	Time duration in seconds. If no t setting given, default time
		depends on context - either scaling to fit the duration of
		play until the end of the current group of sounds, or the
		default value if alone.
	a	Amplitude, where 1.0 gives a level of 0dB, which is the signal
		max of the output. For a modulator wave, this however simply
		adjusts the effect strength.
	a!{}	Second amplitude to modulate (AM) to by wave or envelope,
		and/or a list of modulators given within {} following the
		number if given.
	c	Channel mixing; see "Channel mixing values".
	\	Time shift/delay current operation and following ones, time
		in seconds.

L -- Line generator
	Expects a start value following the L; the start value is repeated
	to make a flat line if the goal parameter isn't used.
	See "Signal generator common parameters" for other named parameters.
	g	Goal (go-to) value, assigned to the parameter after time.
		This value has no default and must be provided. If changed
		again before the full time, the current point reached on the
		previous trajectory will be used to change the start value.
	l	Line shape (default 'lin', or the previous shape if any):
			hor	Horizontal line with old value held until time.
			lin	Linear trajectory over time.
			sin	Sine-like smooth ends trajectory over time.
			exp	Steep "exp(x)-1"-like increase or decrease.
			log	Steep "log(x+1)"-like increase or decrease.
			xpe	Exponential envelope shape (saturate or decay).
			lge	Logarithmic envelope shape (saturate or decay).
		(The 'exp' and 'log' shapes use ear-tuned polynomial
		approximations with definite beginnings and ends,
		designed to sound natural for frequency sweeping,
		and symmetric one to the other. The 'xpe' shape increases
		like 'log' and decreases like 'exp', much like a capacitor
		charges and discharges, natural-sounding for an envelope;
		and 'lge' increases like 'exp' and decreases like 'log'.
		The 'sin' shape sounds similar to 'lin', except it has a
		smoothly curved start and stop, and a steeper middle.)
	v	Start (state) value. It can also be set in this way.

N -- Noise generator
	Noise generator; "wh" (white noise) is currently the only type.
	See "Signal generator common parameters" for other named parameters.
	n	Noise type; "wh" (white noise) is currently the only type.

W -- Wave oscillator
	Wave oscillator; see "Wave types" for all types.
	See "Signal generator common parameters" for other named parameters.
	f	Frequency in Hz, for carrier or modulator.
	f!{}	Second frequency in Hz to modulate (FM) to by wave or envelope,
		and/or a list of modulators given within {} following the
		number if given.
	r	Frequency as a carrier-modulator ratio, for modulators only.
		Maintains a frequency which multiplies that of the carrier by
		the value. For example, r(5/3) for 5/3 (i.e. 3:5) the carrier
		frequency.
	r!{}	Second frequency ratio (modulators only) to modulate (FM)
		to by wave or envelope, and/or a list of modulators given
		within {} following the number if given.
	p	Set the beginning phase of the wave. For example, p(3/4) will
		make a sine or triangle wave begin at its "bottom". This is
		mostly used where wanted for waves used by f!/r! or a!.
	p!{}	A list of modulator (PM) waves is given within the {}, the
		per-sample sum of which is used to phase-modulate the carrier,
		be it the final carrier or in turn another modulator.
	w	Wave type; see "Wave types" for all types.

Wave types:
	sin	Sine.
			For cosine, use (1/4) phase.
	sqr	Square.
	tri	Triangle.
	saw	Saw.
			Increasing slope; use negative amplitude
			or frequency for decreasing slope.
	ahs	Absolute half-frequency sine (adjusted).
			Sine-based parabola-like wave.
			Frequency halved to restore base frequency,
			peak amplitude centered and doubled, phase
			shifted to begin and end at zero amplitude.
			A softer alternative to "saw" (saw wave).
	hrs	Half-rectified sine (adjusted).
			Positive half kept, negative half zero'd.
			Peak amplitude centered and doubled, phase
			shifted to begin and end at zero amplitude.
			A warm and full sound.
	srs	Square root of sine.
			Mirrored for the negative half.
			A softer alternative to "sqr" (square wave).
	ssr	Squared & square root of sine.
			A little more thin and sharp, it differs from
			"srs" a little like "srs" differs from "szh".

Channel mixing values:
	Panning, where 0.0 is centered. Named constants can be used in place
	of numbers for the three classic channel "modes". Values outside the
	range of L to R are allowed, amplifying one channel while giving the
	other a negative amplitude.
	C	0.0
	L	(-1.0)
	R	1.0

The following modifiers are supported:

/:	Time shift/delay next operation and following ones, time in seconds.
	Alternatively, /t will delay by the time of the previous operation.
|:	Add (independently of /) enough time shift/delay for the next operation
	to begin at the end of all that preceeds it, though / and \ may
	further delay it.

Variables:
	A named variable can be assigned by writing an expression beginning
	with "'name", where the "name" is a case-sensitive string with
	alphanumeric characters and/or '_'. Variables are dynamically typed,
	can be assigned several times, and can either be assigned to a number
	or made to point to an object as a label for it.
		To assign a number, "'name=' can be written just before a
	numerical expression. Once it holds a number, it can be used in any
	numerical expression using "$name". (It's possible to use such a
	variable value as part of redefining its value.)
		To point a variable to an object, "'name " can be written
	just before an object is added or referenced. The name can then be
	used to refer back to the object as ":name", to start a new step for
	the object anywhere later in the script.
		A new ":name" step differs in not automatically setting a new
	time duration for the object, so "t" (see "Parameters") or other
	time-altering syntax (see "Timing") must be used in order for the
	old time duration value to be changed.
		Note that a ":name" reference placed in a nesting scope
	different from the original (e.g. outside a list, or in a new list)
	does not move the object into the new nesting scope. It will not be
	added to, nor removed from, any list by being referenced anywhere.
	The time scope is however new and of the reference.
